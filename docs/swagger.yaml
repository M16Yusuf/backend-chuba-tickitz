definitions:
  models.Actor:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  models.Auth:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  models.BookedSeatBySchedule:
    properties:
      paid_at:
        type: string
      schedule:
        type: string
      schedule_id:
        type: integer
      seat_code:
        type: string
      title:
        type: string
      transaction_id:
        type: integer
    type: object
  models.Cinema:
    properties:
      cinema_id:
        type: integer
      cinema_name:
        type: string
    type: object
  models.City:
    properties:
      city_id:
        type: integer
      city_name:
        type: string
    type: object
  models.DetailsMovieResponse:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/models.MovieDetails'
      is_success:
        type: boolean
      page:
        type: integer
    type: object
  models.Director:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  models.ErrorResponse:
    properties:
      code:
        type: integer
      error:
        example: Error message...
        type: string
      is_success:
        type: boolean
      page:
        type: integer
    type: object
  models.Genre:
    properties:
      genre_id:
        type: integer
      genre_name:
        type: string
    type: object
  models.HistoiesResponse:
    properties:
      code:
        type: integer
      data:
        items:
          $ref: '#/definitions/models.History'
        type: array
      is_success:
        type: boolean
      page:
        type: integer
    type: object
  models.History:
    properties:
      cinema:
        $ref: '#/definitions/models.Cinema'
      cinema_id:
        type: integer
      city:
        $ref: '#/definitions/models.City'
      city_id:
        type: integer
      code_ticket:
        type: string
      created_at:
        type: number
      movie:
        $ref: '#/definitions/models.Movie'
      movie_id:
        type: integer
      paid_at:
        type: string
      payment:
        $ref: '#/definitions/models.Payment'
      payment_id:
        type: integer
      rating:
        type: number
      schedule:
        $ref: '#/definitions/models.Schedule'
      schedule_id:
        type: integer
      seat:
        items:
          $ref: '#/definitions/models.Seat'
        type: array
      total:
        type: number
      transaction_id:
        type: integer
    type: object
  models.Movie:
    properties:
      backdrop_path:
        type: string
      director_id:
        type: integer
      duration:
        type: integer
      movie_id:
        type: integer
      overview:
        type: string
      poster_path:
        type: string
      release_date:
        type: string
      title:
        type: string
    type: object
  models.MovieDetails:
    properties:
      actors:
        items:
          $ref: '#/definitions/models.Actor'
        type: array
      backdrop_path:
        type: string
      director:
        $ref: '#/definitions/models.Director'
      director_id:
        type: integer
      duration:
        type: integer
      genres:
        items:
          $ref: '#/definitions/models.Genre'
        type: array
      movie_id:
        type: integer
      overview:
        type: string
      poster_path:
        type: string
      release_date:
        type: string
      title:
        type: string
    type: object
  models.MovieList:
    properties:
      backdrop_path:
        type: string
      director_id:
        type: integer
      duration:
        type: integer
      genres:
        items:
          $ref: '#/definitions/models.Genre'
        type: array
      movie_id:
        type: integer
      overview:
        type: string
      poster_path:
        type: string
      release_date:
        type: string
      title:
        type: string
    type: object
  models.MoviesResponse:
    properties:
      code:
        type: integer
      data:
        items:
          $ref: '#/definitions/models.MovieList'
        type: array
      is_success:
        type: boolean
      page:
        type: integer
    type: object
  models.Payment:
    properties:
      payment_id:
        type: integer
      payment_method:
        type: string
    type: object
  models.ProfileResponse:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/models.User'
      is_success:
        type: boolean
      page:
        type: integer
    type: object
  models.Schedule:
    properties:
      movie_id:
        type: integer
      schedule:
        type: string
      schedule_id:
        type: integer
      title:
        type: string
    type: object
  models.ScheduleResponse:
    properties:
      code:
        type: integer
      data:
        items:
          $ref: '#/definitions/models.Schedule'
        type: array
      is_success:
        type: boolean
      page:
        type: integer
    type: object
  models.Seat:
    properties:
      code:
        type: string
      seat_id:
        type: integer
    type: object
  models.SeatResponse:
    properties:
      code:
        type: integer
      data:
        items:
          $ref: '#/definitions/models.BookedSeatBySchedule'
        type: array
      is_success:
        type: boolean
      page:
        type: integer
    type: object
  models.TokenResponse:
    properties:
      code:
        type: integer
      is_success:
        type: boolean
      page:
        type: integer
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6Miwicm9sZSI6ImFkbWluIiwiZXhwIjoxNzU3MDM4NjQyfQ.J2MAUbAZvFpQl18BkSSyZOSMnbZxPziyZ6q6Bsuj8GU
        type: string
    type: object
  models.User:
    properties:
      email:
        type: string
      first_name:
        type: string
      gender:
        type: string
      last_name:
        type: string
      password:
        type: string
      phone:
        type: string
      point:
        type: integer
      profile_path:
        type: string
      role:
        type: string
      user_id:
        type: integer
    type: object
  models.UserDetailResponse:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/models.User'
      is_success:
        type: boolean
      page:
        type: integer
    type: object
host: 127.0.0.1:8080
info:
  contact: {}
  description: Ticketing application with restful API powered by gin
  title: CHUBA TICKITZ
  version: "1.0"
paths:
  /{any}:
    get:
      description: if route not found, send 404 statusNotfound as response
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      tags:
      - NoRoute
  /auth:
    post:
      consumes:
      - application/json
      description: login using email and password and return as response with JWT
        token
      parameters:
      - description: Input email and password
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Auth'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      tags:
      - login
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register new user input email and password and return new data
        users
      parameters:
      - description: Input email and password new user
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Auth'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProfileResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      tags:
      - Register
  /histories/{user_id}:
    get:
      description: Get all list histories from a user
      parameters:
      - description: get all list histories, by user id
        in: path
        name: user_id
        required: true
        type: string
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.HistoiesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      tags:
      - Histories
  /movies/:
    get:
      description: Get popular movies, filter movies by title or genres
      parameters:
      - description: opsional query for pagination
        in: query
        name: page
        type: integer
      - description: opsional query for search title
        in: query
        name: search
        type: string
      - collectionFormat: multi
        description: opsional query for filter genres
        in: query
        items:
          type: string
        name: genres
        type: array
      produces:
      - application/json
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DetailsMovieResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      tags:
      - Movies
  /movies/{movie_id}:
    get:
      description: Get details movies, get data by known an id movie
      parameters:
      - description: get detail movie by id movie
        in: path
        name: movie_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ScheduleResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      tags:
      - Movies
  /movies/popular:
    get:
      description: Get popular movies, filter movies already rated on every transaction
      parameters:
      - description: opsional query for pagination
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MoviesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      tags:
      - Movies
  /movies/upcoming:
    get:
      description: Get upcoming movies, filter movies that not aired yet
      parameters:
      - description: opsional query for pagination
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MoviesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      tags:
      - Movies
  /schedules/{movieid}:
    get:
      description: Get schedules movie, for a movie
      parameters:
      - description: get schedule by this id movie
        in: path
        name: movieid
        required: true
        type: string
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ScheduleResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      tags:
      - Schedules
  /seats/{schedule_id}:
    get:
      description: Get seat that booked  from a movie get by schedule id
      parameters:
      - description: get booked seat by this schedule id
        in: path
        name: schedule_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SeatResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      tags:
      - Seats
  /users/{user_id}:
    get:
      description: Get details user, gt data by known id user
      parameters:
      - description: get detail movie by id movie
        in: path
        name: user_id
        required: true
        type: string
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserDetailResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      tags:
      - Profile
  /users/update/{user_id}:
    post:
      description: Update user and show new updated data
      parameters:
      - description: get user_id for select which user will update
        in: path
        name: user_id
        required: true
        type: string
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Data film
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProfileResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      tags:
      - Profile
swagger: "2.0"
