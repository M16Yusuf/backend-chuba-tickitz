// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth": {
            "post": {
                "description": "login using email and password and return as response with JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "login"
                ],
                "summary": "Login registered user",
                "parameters": [
                    {
                        "description": "Input email and password",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Auth"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Register new user input email and password and return new data users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Register"
                ],
                "summary": "Register new user",
                "parameters": [
                    {
                        "description": "Input email and password new user",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Auth"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ProfileResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/histories": {
            "get": {
                "security": [
                    {
                        "JWTtoken": []
                    }
                ],
                "description": "Get all list histories from a user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Histories"
                ],
                "summary": "Get histories user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.HistoiesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/movies": {
            "get": {
                "description": "Get popular movies, filter movies by title or genres",
                "produces": [
                    "application/json",
                    "application/json"
                ],
                "tags": [
                    "Movies"
                ],
                "summary": "filter movies by genres, title and pagination",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "opsional query for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "opsional query for search title",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "opsional query for filter genres",
                        "name": "genres",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.DetailsMovieResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/movies/popular": {
            "get": {
                "description": "Get popular movies, filter movies already rated on every transaction",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Movies"
                ],
                "summary": "Get popular movies",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "opsional query for pagination",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.MoviesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/movies/upcoming": {
            "get": {
                "description": "Get upcoming movies, filter movies that not aired yet",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Movies"
                ],
                "summary": "Get upciming movies",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "opsional query for pagination",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.MoviesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/movies/{movie_id}": {
            "get": {
                "description": "Get details movies, get data by known an id movie",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Movies"
                ],
                "summary": "Get details from a movie",
                "parameters": [
                    {
                        "type": "string",
                        "description": "get detail movie by id movie",
                        "name": "movie_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ScheduleResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/schedules/{movieid}": {
            "get": {
                "security": [
                    {
                        "JWTtoken": []
                    }
                ],
                "description": "Get schedules movie, for a movie",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Schedules"
                ],
                "summary": "Get schedule for a movie",
                "parameters": [
                    {
                        "type": "string",
                        "description": "get schedule by this id movie",
                        "name": "movieid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ScheduleResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/seats/{schedule_id}": {
            "get": {
                "security": [
                    {
                        "JWTtoken": []
                    }
                ],
                "description": "Get seat that booked  from a movie get by schedule id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seats"
                ],
                "summary": "Get Booked seat",
                "parameters": [
                    {
                        "type": "string",
                        "description": "get booked seat by this schedule id",
                        "name": "schedule_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SeatResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/": {
            "get": {
                "security": [
                    {
                        "JWTtoken": []
                    }
                ],
                "description": "Get details user, gt data by known id user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "get profile user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UserDetailResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "JWTtoken": []
                    }
                ],
                "description": "Update user and show new updated data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Update registerd user",
                "parameters": [
                    {
                        "description": "Data new user",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ProfileResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/avatar": {
            "patch": {
                "security": [
                    {
                        "JWTtoken": []
                    }
                ],
                "description": "Update user and show new updated data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Update registerd user",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Upload good image",
                        "name": "avatar",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ProfileResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/{any}": {
            "get": {
                "description": "if route not found, send 404 statusNotfound as response",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NoRoute"
                ],
                "summary": "testing display for no route",
                "responses": {
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Actor": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.Auth": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "models.BookedSeatBySchedule": {
            "type": "object",
            "properties": {
                "paid_at": {
                    "type": "string"
                },
                "schedule": {
                    "type": "string"
                },
                "schedule_id": {
                    "type": "integer"
                },
                "seat_code": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "transaction_id": {
                    "type": "integer"
                }
            }
        },
        "models.Cinema": {
            "type": "object",
            "properties": {
                "cinema_id": {
                    "type": "integer"
                },
                "cinema_name": {
                    "type": "string"
                }
            }
        },
        "models.City": {
            "type": "object",
            "properties": {
                "city_id": {
                    "type": "integer"
                },
                "city_name": {
                    "type": "string"
                }
            }
        },
        "models.DetailsMovieResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/models.MovieDetails"
                },
                "is_success": {
                    "type": "boolean"
                },
                "page": {
                    "type": "integer"
                }
            }
        },
        "models.Director": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "error": {
                    "type": "string",
                    "example": "Error message..."
                },
                "is_success": {
                    "type": "boolean"
                },
                "page": {
                    "type": "integer"
                }
            }
        },
        "models.Genre": {
            "type": "object",
            "properties": {
                "genre_id": {
                    "type": "integer"
                },
                "genre_name": {
                    "type": "string"
                }
            }
        },
        "models.HistoiesResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.History"
                    }
                },
                "is_success": {
                    "type": "boolean"
                },
                "page": {
                    "type": "integer"
                }
            }
        },
        "models.History": {
            "type": "object",
            "properties": {
                "cinema": {
                    "$ref": "#/definitions/models.Cinema"
                },
                "cinema_id": {
                    "type": "integer"
                },
                "city": {
                    "$ref": "#/definitions/models.City"
                },
                "city_id": {
                    "type": "integer"
                },
                "code_ticket": {
                    "type": "string"
                },
                "created_at": {
                    "type": "number"
                },
                "movie": {
                    "$ref": "#/definitions/models.Movie"
                },
                "movie_id": {
                    "type": "integer"
                },
                "paid_at": {
                    "type": "string"
                },
                "payment": {
                    "$ref": "#/definitions/models.Payment"
                },
                "payment_id": {
                    "type": "integer"
                },
                "rating": {
                    "type": "number"
                },
                "schedule": {
                    "$ref": "#/definitions/models.Schedule"
                },
                "schedule_id": {
                    "type": "integer"
                },
                "seat": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Seat"
                    }
                },
                "total": {
                    "type": "number"
                },
                "transaction_id": {
                    "type": "integer"
                }
            }
        },
        "models.Movie": {
            "type": "object",
            "properties": {
                "backdrop_path": {
                    "type": "string"
                },
                "director_id": {
                    "type": "integer"
                },
                "duration": {
                    "type": "integer"
                },
                "movie_id": {
                    "type": "integer"
                },
                "overview": {
                    "type": "string"
                },
                "poster_path": {
                    "type": "string"
                },
                "release_date": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "models.MovieDetails": {
            "type": "object",
            "properties": {
                "actors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Actor"
                    }
                },
                "backdrop_path": {
                    "type": "string"
                },
                "director": {
                    "$ref": "#/definitions/models.Director"
                },
                "director_id": {
                    "type": "integer"
                },
                "duration": {
                    "type": "integer"
                },
                "genres": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Genre"
                    }
                },
                "movie_id": {
                    "type": "integer"
                },
                "overview": {
                    "type": "string"
                },
                "poster_path": {
                    "type": "string"
                },
                "release_date": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "models.MovieList": {
            "type": "object",
            "properties": {
                "backdrop_path": {
                    "type": "string"
                },
                "director_id": {
                    "type": "integer"
                },
                "duration": {
                    "type": "integer"
                },
                "genres": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Genre"
                    }
                },
                "movie_id": {
                    "type": "integer"
                },
                "overview": {
                    "type": "string"
                },
                "poster_path": {
                    "type": "string"
                },
                "release_date": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "models.MoviesResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.MovieList"
                    }
                },
                "is_success": {
                    "type": "boolean"
                },
                "page": {
                    "type": "integer"
                }
            }
        },
        "models.Payment": {
            "type": "object",
            "properties": {
                "payment_id": {
                    "type": "integer"
                },
                "payment_method": {
                    "type": "string"
                }
            }
        },
        "models.ProfileResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/models.User"
                },
                "is_success": {
                    "type": "boolean"
                },
                "page": {
                    "type": "integer"
                }
            }
        },
        "models.Schedule": {
            "type": "object",
            "properties": {
                "movie_id": {
                    "type": "integer"
                },
                "schedule": {
                    "type": "string"
                },
                "schedule_id": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "models.ScheduleResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Schedule"
                    }
                },
                "is_success": {
                    "type": "boolean"
                },
                "page": {
                    "type": "integer"
                }
            }
        },
        "models.Seat": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "seat_id": {
                    "type": "integer"
                }
            }
        },
        "models.SeatResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.BookedSeatBySchedule"
                    }
                },
                "is_success": {
                    "type": "boolean"
                },
                "page": {
                    "type": "integer"
                }
            }
        },
        "models.TokenResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "is_success": {
                    "type": "boolean"
                },
                "page": {
                    "type": "integer"
                },
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6Miwicm9sZSI6ImFkbWluIiwiZXhwIjoxNzU3MDM4NjQyfQ.J2MAUbAZvFpQl18BkSSyZOSMnbZxPziyZ6q6Bsuj8GU"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "point": {
                    "type": "integer"
                },
                "profile_path": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "models.UserDetailResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/models.User"
                },
                "is_success": {
                    "type": "boolean"
                },
                "page": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "JWTtoken": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "127.0.0.1:8080",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "CHUBA TICKITZ",
	Description:      "Ticketing application with restful API powered by gin",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
